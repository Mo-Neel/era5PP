Metadata-Version: 2.1
Name: pydap
Version: 3.4.1
Summary: An implementation of the Data Access Protocol.
Home-page: http://pydap.org/
Author: Roberto De Almeida
Author-email: roberto@dealmeida.net
Maintainer: James Hiebert
Maintainer-email: james@hiebert.name
License: MIT
Keywords: opendap dods dap dap2 dap4 science data
Classifier: Programming Language :: Python :: 3.9
Classifier: Programming Language :: Python :: 3.10
Classifier: Programming Language :: Python :: 3.11
Requires-Python: >=3.7
Description-Content-Type: text/markdown
License-File: LICENSE
Requires-Dist: numpy
Requires-Dist: Webob
Requires-Dist: Jinja2
Requires-Dist: docopt
Requires-Dist: six (>=1.4.0)
Requires-Dist: beautifulsoup4
Requires-Dist: requests
Provides-Extra: cas
Requires-Dist: lxml ; extra == 'cas'
Provides-Extra: client
Provides-Extra: docs
Requires-Dist: Sphinx ; extra == 'docs'
Requires-Dist: Pygments ; extra == 'docs'
Requires-Dist: sphinx-rtd-theme ; extra == 'docs'
Provides-Extra: functions
Requires-Dist: gsw (==3.0.6) ; extra == 'functions'
Requires-Dist: coards ; extra == 'functions'
Provides-Extra: handlers.netcdf
Requires-Dist: netCDF4 ; extra == 'handlers.netcdf'
Requires-Dist: ordereddict ; extra == 'handlers.netcdf'
Provides-Extra: netcdf
Requires-Dist: netCDF4 ; extra == 'netcdf'
Requires-Dist: ordereddict ; extra == 'netcdf'
Provides-Extra: server
Requires-Dist: gunicorn ; extra == 'server'
Requires-Dist: PasteDeploy ; extra == 'server'
Provides-Extra: testing
Requires-Dist: gsw (==3.0.6) ; extra == 'testing'
Requires-Dist: coards ; extra == 'testing'
Requires-Dist: lxml ; extra == 'testing'
Requires-Dist: gunicorn ; extra == 'testing'
Requires-Dist: PasteDeploy ; extra == 'testing'
Requires-Dist: netCDF4 ; extra == 'testing'
Requires-Dist: ordereddict ; extra == 'testing'
Requires-Dist: pytest (>=3.6) ; extra == 'testing'
Requires-Dist: pytest-cov ; extra == 'testing'
Requires-Dist: pytest-attrib ; extra == 'testing'
Requires-Dist: beautifulsoup4 ; extra == 'testing'
Requires-Dist: requests-mock ; extra == 'testing'
Requires-Dist: WebTest ; extra == 'testing'
Requires-Dist: flake8 ; extra == 'testing'
Requires-Dist: werkzeug ; extra == 'testing'
Requires-Dist: pyopenssl ; extra == 'testing'
Provides-Extra: tests
Requires-Dist: pytest (>=3.6) ; extra == 'tests'
Requires-Dist: pytest-cov ; extra == 'tests'
Requires-Dist: pytest-attrib ; extra == 'tests'
Requires-Dist: beautifulsoup4 ; extra == 'tests'
Requires-Dist: requests-mock ; extra == 'tests'
Requires-Dist: WebTest ; extra == 'tests'
Requires-Dist: flake8 ; extra == 'tests'
Requires-Dist: werkzeug ; extra == 'tests'
Requires-Dist: pyopenssl ; extra == 'tests'

pydap
=====

[![Build Status](https://travis-ci.org/pydap/pydap.svg)](https://travis-ci.org/pydap/pydap)
[![Python3](https://img.shields.io/badge/python-3-blue.svg)](https://www.python.org/downloads/)
[![PyPI](https://img.shields.io/pypi/v/pydap.svg?maxAge=2592000?style=plastic)](https://pypi.python.org/pypi/pydap/)
[![Join the chat at https://gitter.im/pydap/pydap](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/pydap/pydap) 

[pydap](https://pydap.github.io/pydap/) is an implementation of the
Opendap/DODS protocol, written from scratch in pure python.  You can
use pydap to access scientific data on the internet without having to
download it; instead, you work with special array and iterable objects
that download data on-the-fly as necessary, saving bandwidth and
time. The module also comes with a robust-but-lightweight Opendap
server, implemented as a WSGI application.


Quickstart
----------

You can install the latest version using
[pip](http://pypi.python.org/pypi/pip). After [installing
pip](http://www.pip-installer.org/en/latest/installing.html) you can
install pydap with this command:

```bash
    $ pip install pydap
```

This will install pydap together with all the required
dependencies. You can now open any remotely served dataset, and pydap
will download the accessed data on-the-fly as needed:

```python

    >>> from pydap.client import open_url
    >>> dataset = open_url('http://test.opendap.org/dap/data/nc/coads_climatology.nc')
    >>> var = dataset['SST']
    >>> var.shape
    (12, 90, 180)
    >>> var.dtype
    dtype('>f4')
    >>> data = var[0,10:14,10:14]  # this will download data from the server
    >>> data
    <GridType with array 'SST' and maps 'TIME', 'COADSY', 'COADSX'>
    >>> print(data.data)
    [array([[[ -1.26285708e+00,  -9.99999979e+33,  -9.99999979e+33,
              -9.99999979e+33],
            [ -7.69166648e-01,  -7.79999971e-01,  -6.75454497e-01,
              -5.95714271e-01],
            [  1.28333330e-01,  -5.00000156e-02,  -6.36363626e-02,
              -1.41666666e-01],
            [  6.38000011e-01,   8.95384610e-01,   7.21666634e-01,
               8.10000002e-01]]], dtype=float32), array([ 366.]), array([-69., -67., -65., -63.]), array([ 41.,  43.,  45.,  47.])]
```

For more information, please check the documentation on [using pydap
as a client](https://pydap.github.io/pydap/client.html). pydap also
comes with a simple server, implemented as a [WSGI]( http://wsgi.org/)
application. To use it, you first need to install the server and
optionally a data handler:

```bash

    $ pip install pydap[server,handlers.netcdf]
```

This will install support for
[netCDF](http://www.unidata.ucar.edu/software/netcdf/) files; more
[handlers](https://pydap.github.io/pydap/handlers.html) for
different formats are available, if necessary. Now create a directory
for your server data.


To run the server just issue the command:

```bash

    $ pydap --data ./myserver/data/ --port 8001
```

This will start a standalone server running on http://localhost:8001/,
serving netCDF files from ``./myserver/data/``, similar to the test
server at http://test.pydap.org/. Since the server uses the
[WSGI](http://wsgi.org/) standard, it can easily be run behind
Apache. The [server
documentation](https://pydap.github.io/pydap/server.html) has
more information on how to better deploy pydap.

## Documentation

For more information, see [the pydap
documentation](https://pydap.github.io/pydap/).

## Help

If you need any help with pydap, please feel free to send an email to
the [mailing list](http://groups.google.com/group/pydap/)

